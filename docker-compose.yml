networks:
  headscale-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  headscale_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

services:
  # Traefik - Reverse Proxy with ACME DNS-01
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    networks:
      headscale-network:
        ipv4_address: 172.20.0.5
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"  # For QUIC/DERP
      - "8080:8080"    # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/traefik:/data
      - ./config/traefik:/etc/traefik:ro
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    command:
      - --api.dashboard=true
      - --api.insecure=false
      - --log.level=INFO
      - --accesslog=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=headscale-infrastructure_headscale-network
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.udps.address=:443/udp
      - --certificatesresolvers.cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.cloudflare.acme.storage=/data/acme.json
      - --metrics.prometheus=true
      - --metrics.prometheus.addentrypointslabels=true
      - --metrics.prometheus.addserviceslabels=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.tailnet.work`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"
      # Security Headers
      - "traefik.http.middlewares.security.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.security.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security.headers.referrerPolicy=no-referrer"
      - "traefik.http.middlewares.security.headers.customFrameOptionsValue=DENY"
      # Redirect HTTP to HTTPS
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{any:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    networks:
      headscale-network:
        ipv4_address: 172.20.0.10
    environment:
      POSTGRES_DB: headscale
      POSTGRES_USER: headscale
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U headscale"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=false"

  # Headscale Core
  headscale:
    image: headscale/headscale:latest
    container_name: headscale
    restart: unless-stopped
    networks:
      headscale-network:
        ipv4_address: 172.20.0.20
    volumes:
      - ./config/headscale:/etc/headscale:ro
      - headscale_data:/var/lib/headscale
    entrypoint: ["/ko-app/headscale"]
    command: ["serve"]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - HEADSCALE_CONFIG_FILE=/etc/headscale/config.yaml
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=headscale-infrastructure_headscale-network"
      - "traefik.http.routers.headscale.rule=Host(`headscale.tailnet.work`)"
      - "traefik.http.routers.headscale.entrypoints=websecure"
      - "traefik.http.routers.headscale.tls.certresolver=cloudflare"
      - "traefik.http.routers.headscale.middlewares=security"
      - "traefik.http.services.headscale.loadbalancer.server.port=8080"

  # DERP/STUN Server for NAT traversal (commented out due to image issues)
  # derper:
  #   image: ghcr.io/headscale/derper:latest
  #   container_name: derper
  #   restart: unless-stopped
  #   networks:
  #     headscale-network:
  #       ipv4_address: 172.20.0.25
  #   environment:
  #     - DERP_DOMAIN=derp.tailnet.work
  #     - DERP_ADDR=:443
  #     - DERP_HTTP_PORT=80
  #     - DERP_CERT_MODE=manual
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=headscale-infrastructure_headscale-network"
  #     - "traefik.http.routers.derp.rule=Host(`derp.tailnet.work`)"
  #     - "traefik.http.routers.derp.entrypoints=websecure"
  #     - "traefik.http.routers.derp.tls.certresolver=cloudflare"
  #     - "traefik.http.services.derp.loadbalancer.server.port=80"
  #     # UDP routing for DERP
  #     - "traefik.udp.routers.derp-udp.entrypoints=udps"
  #     - "traefik.udp.routers.derp-udp.service=derp-udp-svc"
  #     - "traefik.udp.services.derp-udp-svc.loadbalancer.server.port=443"

  # Admin UI - Modern Next.js Interface
  admin-ui:
    build: 
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: admin-ui
    restart: unless-stopped
    networks:
      headscale-network:
        ipv4_address: 172.20.0.30
    environment:
      - HEADSCALE_URL=https://headscale.tailnet.work
      - OIDC_ISSUER=${OIDC_ISSUER}
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID}
      - OIDC_CLIENT_SECRET=${OIDC_CLIENT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
    depends_on:
      - headscale
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=headscale-infrastructure_headscale-network"
      - "traefik.http.routers.admin.rule=Host(`admin.tailnet.work`)"
      - "traefik.http.routers.admin.entrypoints=websecure"
      - "traefik.http.routers.admin.tls.certresolver=cloudflare"
      - "traefik.http.routers.admin.middlewares=security,ratelimit"
      - "traefik.http.services.admin.loadbalancer.server.port=3000"

  # Config Orchestrator API
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: api-orchestrator
    restart: unless-stopped
    networks:
      headscale-network:
        ipv4_address: 172.20.0.35
    environment:
      - HEADSCALE_URL=https://headscale.tailnet.work
      - HEADSCALE_API_KEY=${HEADSCALE_API_KEY}
      - OIDC_ISSUER=${OIDC_ISSUER}
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID}
      - OIDC_CLIENT_SECRET=${OIDC_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./data:/app/data:rw
    depends_on:
      - headscale
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=headscale-infrastructure_headscale-network"
      - "traefik.http.routers.api.rule=Host(`api.tailnet.work`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=cloudflare"
      - "traefik.http.routers.api.middlewares=security,api-ratelimit"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      # Rate limiting for API
      - "traefik.http.middlewares.api-ratelimit.ratelimit.average=200"
      - "traefik.http.middlewares.api-ratelimit.ratelimit.burst=50"

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      headscale-network:
        ipv4_address: 172.20.0.40
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=headscale-infrastructure_headscale-network"
      - "traefik.http.routers.prometheus.rule=Host(`monitor.tailnet.work`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=cloudflare"
      - "traefik.http.routers.prometheus.middlewares=security,auth"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    networks:
      headscale-network:
        ipv4_address: 172.20.0.45
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=headscale-infrastructure_headscale-network"
      - "traefik.http.routers.grafana.rule=Host(`grafana.tailnet.work`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=cloudflare"
      - "traefik.http.routers.grafana.middlewares=security"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    restart: unless-stopped
    networks:
      headscale-network:
        ipv4_address: 172.20.0.50
    volumes:
      - ./config/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    labels:
      - "traefik.enable=false"

  # Promtail - Log Collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    restart: unless-stopped
    networks:
      headscale-network:
        ipv4_address: 172.20.0.55
    volumes:
      - ./config/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    labels:
      - "traefik.enable=false"

  # Alertmanager - Alert Management
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    networks:
      headscale-network:
        ipv4_address: 172.20.0.60
    volumes:
      - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alerts.tailnet.work'
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=headscale-infrastructure_headscale-network"
      - "traefik.http.routers.alertmanager.rule=Host(`alerts.tailnet.work`)"
      - "traefik.http.routers.alertmanager.entrypoints=websecure"
      - "traefik.http.routers.alertmanager.tls.certresolver=cloudflare"
      - "traefik.http.routers.alertmanager.middlewares=security,auth"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    networks:
      headscale-network:
        ipv4_address: 172.20.0.65
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    labels:
      - "traefik.enable=false"